initialize() {

    // this should define RECOMBTYPE, and SELTYPE
    // RECOMBTYPE can be 'base', 'step', or 'hotspot'
    // SELTYPE can be 'neutral', 'selected', or 'balancing'
    source(paste(c(OUTDIR, "parameters.slim"), sep="/"));

    initializeSLiMModelType("nonWF");
    initializeSLiMOptions(dimensionality="xy");
    initializeTreeSeq();

    defineConstant("OUTFILE", paste(c(OUTDIR, "results.trees"), sep="/"));

    defineConstant("K", 100);  // carrying-capacity per unit square
    defineConstant("S", 0.2	);  // sigma_S, the spatial interaction and dispersal distance
    defineConstant("L", 3);    // mean lifetime at stationarity
    defineConstant("W", 8.0);  // width and height of the simulated area
    defineConstant("RHO", (K * 2 * PI * S^2)); // carrying capacity per S-circle

    // read chromosome map (just so we know how long to make it)
    if (RECOMBTYPE == "hotspot") {
        endpoint_file = "decode_female_chr7.endpoints.txt";
        rates_file = "decode_female_chr7.rates.txt";
    } else {
        endpoint_file = "step_recomb.endpoints.txt";
        rates_file = "step_recomb.rates.txt";
    }
    lines = readFile(endpoint_file);
    values = asInteger(lines);
    defineConstant("X", values);
    lines = readFile(rates_file);
    values = asFloat(lines);
    defineConstant("R", values);
    
    initializeMutationType("m1", 0.5, "g", -0.005, 2);
    initializeMutationType("m2", 0.5, "g", 0.005, 2);
    initializeMutationType("m3", 0.5, "n", 0.0, 0.1	);

    m1.convertToSubstitution = T;
    m2.convertToSubstitution = T;
    m3.convertToSubstitution = T;

    
    if (SELTYPE == "neutral") {
        initializeGenomicElementType("g1", c(m1, m2), c(29.0, 1.0));
        initializeMutationRate(0.0);
    } else if (SELTYPE == "selected") {
        initializeGenomicElementType("g1", c(m1, m2), c(29.0, 1.0));
        initializeMutationRate(1e-10);
    } else if (SELTYPE == "balancing") {
        initializeGenomicElementType("g1", c(m3), c(1.0));
        initializeMutationRate(1e-10);
    } else {
        stop(paste(c("unknown SELTYPE", SELTYPE)));
    }
    initializeGenomicElement(g1, asInteger(max(X)*1/3), asInteger(max(X)*1/2));
    initializeGenomicElement(g1, asInteger(max(X)*5/6), max(X));

    if (RECOMBTYPE == "base") {
        initializeRecombinationRate(1e-9);
    } else if (RECOMBTYPE == "step" | RECOMBTYPE == "hotspot") {
        initializeRecombinationRate(R, X);
    } else {
        stop(paste(c("unknown RECOMBTYPE", RECOMBTYPE)));
    }
    
    // spatial competition and mate choice
    initializeInteractionType(1, "xy", reciprocal=T, maxDistance=S * 3);
    i1.setInteractionFunction("n", 1.0, S);

}

reproduction() {
    // choose our nearest neighbor as a mate, within the max distance
    mate = i1.nearestNeighbors(individual, 1);
    if (mate.size()) {
        fecundity = individual.tagF;        
        if (fecundity > 0) {
           for (i in seqLen(rpois(1, fecundity))) {
               offspring = subpop.addCrossed(individual, mate);
               pos = individual.spatialPosition + rnorm(2, 0, S);
               offspring.setSpatialPosition(p1.pointReflected(pos));
               offspring.color = rgb2color(c(0.5+10*individual.sumOfMutationsOfType(m3),0.5-10*individual.sumOfMutationsOfType(m3),1));
           }
        }
    }
}

1 early() {
    sim.addSubpop("p1", 5000);
    p1.setSpatialBounds(c(0, 0, W, W));
    // random initial positions
    for (ind in p1.individuals)
        ind.setSpatialPosition(p1.pointUniform());
    i1.evaluate();

    if (SELTYPE == "balancing") {
        sim.registerFitnessCallback(NULL, 
            "{ return 1.0; }",
            m3);
        sim.registerLateEvent(NULL
            "inds = p1.individuals; fecundities = (1 + (2 * inds.x/W - 1.0) * inds.sumOfMutationsOfType(m3)); fecundities = fecundities / mean(fecundities) / L; inds.tagF = fecundities;");
    }

    // header info
    catn("Overall mutation rate: " + sim.chromosome.overallMutationRate);
    catn("Overall recombination rate: " + sim.chromosome.overallRecombinationRate);
    catn();
    catn("generation" + " " + "individualCount" + " " + "num_mutations" + " " + "time");
}

early() {
    i1.evaluate(p1);
    inds = p1.individuals;
    competition = i1.totalOfNeighborStrengths(inds);
    inds.fitnessScaling = RHO / (1 + competition);
    // avoid edge effects
    inds.fitnessScaling = inds.fitnessScaling * pmin(inds.x, 1.0) * pmin(inds.y, 1.0) * pmin(W - inds.x, 1.0) * pmin(W - inds.y, 1.0);
}

1: late() {
    i1.evaluate(p1);
    
    if ((sim.generation % 200) == 0) {
        cat(sim.generation + " " + p1.individualCount + " " + size(sim.mutations));
        catn(" " + clock());
    }
}

500000 late() {
    sim.treeSeqOutput(OUTFILE, simplify=T);
}
